hello wrold 

1. Count the total number of documents in the movies collection.
---> ([{ $count: "total_movies" }])

2. Find all movies released in the year 2000.
--->  ([{"$match": {"year": 2000}}])

3. List all movies with a runtime greater than 120 minutes.
--->([{"$match": {"runtime": { "$gt": 120 }}}])

4. Find all movies where the rated field is "PG-13".
---> [{"$match": {"rated": "PG-13"}}]

5. Count the number of movies in each year.
---> [{$group: { _id: "$year","count": {"$sum": 1}}}]

6. Find the average runtime of all movies.
--->[{"$group": {_id: null,"avg_runtime": {"$avg": "$runtime"}}}]

7. List the top 5 movies with the highest IMDb rating.
---> [{"$match": {"imdb.rating": {"$exists": true}}},{"$sort": {"imdn.rating": -1}},{"$limit": 5},{"$project": {"_id":0,"title":1,"imdb.rating":1 }}]

8.Find all movies where the type is "movie" (not series or episode).
---> [{"$match": {"type": "movie"}}]

9. Count the number of movies in each genre.
---> [{"$unwind": "$genres"},{"$group": {_id: "$genres","count": {"$sum": 1}}}]

10. Find all movies where Tom Hanks is in the cast.
---> [{$match: {"cast": "Tom Hanks"}}]

11. Group movies by year and count the number of movies released each year.
---> [{$group: {_id: "$year","count": {$sum: 1}}}]

12. Find the average IMDb rating for movies released each year.
---> [{$group: {_id: null,"avgrage_imdb_rating": {$avg: "$imdb.rating"}}}]

13. List the top 10 years with the most movies released.
---> [{$group: {_id: "$year","count": {$sum: 1}}},{$sort: {"count": -1}},{$limit: 10},{$project: {"_id":1,"count":1}}]

14. Find all movies where the directors field is an array with more than 2 directors.
---> [{$match: {$expr: {$gt: [{$size: "$directors"}, 2]}}}]

15. Count the number of movies where the languages field includes "English".
--->[{$group: {_id: null,"count": {"$languages": {$sum: 1}}}}]

16. Find the movie with the longest runtime.
--->[{$group: { _id: "$runtime",  }},{$sort: {"runtime": 1}},{$limit: 1}]

17. List all movies where the plot contains the word "war".
---> [{$match: {"plot": {$regex: "war", $options: "i"}}}]

18. Group movies by rated and find the average runtime for each rating.
--->[{$group: {_id: "$rated","avg_rating": {$avg: "$runtime"}}}]

19. Find all movies where the awards.wins is greater than 5.
---> [{$match: {"awards.wins": {$gt: 5}}}]

20. List the top 5 directors with the most movies.
---> [{$unwind: "$directors"},{$group: {_id: "$directors","movieCount": {$sum: 1}}},{$sort: {"movieCount": -1}},{$limit: 5}]

21.Use $lookup to join the comments collection with the movies collection and find all comments for a specific movie.
---> [{"$match": { "_id": ObjectId("573a1390f29313caabcd587d") }},{"$lookup": {"from": "comments","localField": "_id""foreignField":"movie_id","as": "movie_comments"}},{"$project": {"_id": 0,"title": 1,"year": 1,"movie_comments.text":1"movie_commentsuser": 1}}]

22.Unwind the genres array and count the number of movies in each genre.
---> [{"$unwind": "$genres"},{"$group": {_id: "$genres","count": {"$sum": 1}}}]

23. Find the average number of awards won by movies in each year
--->[{$group: {_id: "$year","avg": {$avg: "$awards.wins"}}}]

24.Use $addFields to add a new field isLong that is true if the runtime is greater than 120 minutes.
--->[{$addFields: {"isLong": {$gt: ["$runtime", 120]}}}]

25.Group movies by year and find the movie with the highest IMDb rating for each year.
---> [{$match: {"imdb.rating": {$exists:true}}},{$group: {_id: "$year","topMovie": {$first: "$$ROOT"}}},]

26. Use $project to display only the title, year, and imdb.rating fields for all movies.
---> [{$project: {"_id":0,"title":1,"year":1,"imdb.rating":1}}]

27. Find all movies where the cast includes both "Tom Hanks" and "Meg Ryan".
---> [{$match: {"cast": {$all: ["Tom Hanks","Meg Ryan"]}}}]

28. Use $unwind on the languages array and count the number of movies in each language.
--->[{$unwind: "$languages"},{$group: {_id: "$languages","count": {$sum: 1}}},{$sort: {"count": -1}}]

29. Find the top 5 actors who appear in the most movies.
---> [{$unwind: "$cast"},{$group: {_id: "$cast","count": {$sum: 1}}},{$sort: {"count": -1}},{$limit: 5}]

30. Use $lookup to join the theaters collection with the movies collection and find all theaters showing a specific movie.
---> [{$match: {"_id": ObjectId('573a1391f29313caabcd8268')}},{$lookup: {from: "theaters",localField: "_id",foreignField: "movie_id",as: "theater_names"}},{$project: {"_id":1,"title":1,"theater_names":1}}]

31. Find the total number of comments for each movie.
---> [{$lookup: {from: "comments",localField: "_id",foreignField: "movie_id",as: "movie_comments"}},{$project: {"title":1,"num_comments": {$size: "$movie_comments"}}}]

32. Calculate the average number of comments per movie.
---> [{"$lookup": {"from": "comments","localField": "_id","foreignField": "movie_id","as": "movie_comments"}},{"$project": {"num_comments": { "$size": "$movie_comments" }}},{"$group": {"_id": null,"average_comments": { "$avg": "$num_comments" }}}]

33. List all movies with more than 10 comments.
---> [{$lookup: {"from": "comments","localField": "_id","foreignField": "movie_id","as": "movie_comments"}},{$addFields: {"num_commet": {$size: "$movie_comments"}}},{$match: {"num_commet": {$gt: 10}}}]

34. Find the movie with the most comments.
---> [{$lookup: {"from": "comments","localField": "_id","foreignField": "movie_id","as": "movie_comments"}},{$addFields: {"num_commet": {$size: "$movie_comments"}}},{$sort: {"num_commet": -1}}]

35. Use $lookup to join the users collection with the comments collection and find all comments made by a specific user.
---> [{"$match": { "name": "Yara Greyjoy" } },{"$lookup": {"from": "comments","localField": "_id","foreignField": "user_id","as": "user_comments"}},{"$project": {"name": 1,"user_comments": 1}}]

36. Group comments by movie and calculate the average rating for each movie.
---> [{"$lookup": {"from": "comments","localField": "_id","foreignField": "movie_id","as": "movie_comments"}},{"$unwind": "$movie_comments"},{"$group": {"_id": "$_id","title": { "$first": "$title" },"average_rating": { "$avg": "$movie_comments.rating" },"total_comments": { "$sum": 1 }}},{"$sort": { "average_rating": -1 }}]

37. Find all movies where the tomatoes.viewer.rating is greater than 3.5.
---> [{$match: {"tomatoes.viewer.rating": {$gt: 3.5}}}]

38. Use $addFields to add a new field isHighlyRated that is true if the IMDb rating is greater than 8.
---> [{$match: {"imdb.rating": {$gt: 8}}},{$group: {_id: "$imdb.rating",}},{$addFields: {"isHighlyRated": true}}]

39. Find the top 5 movies with the highest tomatoes.viewer.rating.
---> [{$match: {"tomatoes.viewer.rating": {$exists: true}}},{$project: {"title":1,"tomatoes.viewer.rating":1}},{$sort: {"tomatoes.viewer.rating": -1}},{$limit: 5}]

40. Use $unwind on the awards.nominations array and count the number of nominations for each movie.
---> [{$unwind: "$awards.nominations"},{$group: {_id: "$awards.nominations","title": {$first: "$title"},"count": {$sum: 1}}}]

41. Find the total number of awards won by each movie.
---> [{$match: {"awards.wins": {$exists:true}}},{$group: {_id: "$_id","title": {$first: "$title"},"count": {$sum: "$awards.wins"}}}, ]

42. Calculate the average runtime of movies for each genre.
--->[{$unwind: "$genres"},{$group: {_id: "$_id","genres": {$first: "$genres"},"average_num": {$avg: "$runtime"}}}, ]

43. List all movies where the directors field is an array with exactly 1 director.
---> [{$match: {$expr: {$eq: [{$size: "$directors"}, 1]}}},{$project:{"title":1,"directors":1}}]

44. Find the top 5 movies with the most awards.
---> [{$match: {"title": {$exists:true}}},{$group: {_id: "$title","count": {$sum: "$awards.wins"}}},]

45. Use $unwind on the cast array and count the number of movies each actor has appeared in.
--->[{$unwind: "$cast"},{$group: {_id: "$cast","movie_count": {$sum:1}}}]

46. Find all movies where the plot contains the word "love".
---> [{$match: {"plot": {$regex: "Love", $options: "i"}}},]

47. Group movies by rated and find the total number of awards won for each rating.
---> [{$group: {_id: "$rated","movie_awards": {$sum: "$awards.wins"}}}]

48. Use $addFields to add a new field isAwardWinning that is true if the movie has won at least 1 award.
---> [{$addFields: {isAwardWinning: { $gt: ["$awards.wins", 0] }}}]

49. Find the movie with the most nominations.
--->[{$unwind: "$awards.nominations"},{$group: {_id: "$title",totalNominations: { $sum: 1 }}},{$sort: { totalNominations: -1 }},{$limit: 1}]

50. List all movies where the languages field includes both "English" and "French".
--->[{$match: {"languages": {$all: ["English", "French"]}}}]

51. Use $lookup to join the theaters collection with the movies collection and find all movies showing in a specific theater.
---> [{"$lookup": {"from": "theaters","localField": "_id","foreignField": "movie_id","as": "theater_info" }},{"$unwind": "$theater_info"  // Unwind the theater_info array to get one theater per movie},{"$match": {"theater_info.name": "Specific Theater Name"}},{"$project": {"_id": 1,"title": 1,"theater_info.name": 1}}]

52. Find the total number of comments made in each year.
---> [{$group: {_id: "$released","count": {$sum: "$num_mflix_comments"}}},{$sort: {"_id": -1}}]

53. Calculate the average IMDb rating for movies in each genre.
--->[{$unwind: "$genres"},{$group: {_id: "$genres",averageIMDbRating: { $avg: "$imdb.rating" }}}]

54.List all movies where the runtime is between 90 and 120 minutes.
---> [{$match: {"runtime": {$gte: 90, $lte:120}}}]

55. Use $unwind on the awards.wins array and count the number of wins for each movie.
---> [{$unwind: "$awards.wins"},{$group: {_id: "$title",totalWins: { $sum: 1 }}}]

56. Find the top 5 genres with the most movies.
--->[{$unwind: "$genres"},{$group: {_id: "$genres",count: { $sum: 1 }}},{$sort: { count: -1 }},{$limit: 5}]

57. Use $project to display only the title, year, and awards.wins fields for all movies.
--->[{$project: {title: 1,year: 1,"awards.wins": 1}}]

58. Find all movies where the cast includes "Leonardo DiCaprio".
--->[{$match: {cast: "Leonardo DiCaprio"}}]

59. Group movies by year and find the total runtime of all movies released each year.
--->[{$match: {"title": {$exists:true}}},{$group: {_id: "$year","title": {$push: "$title"}}},{$project: {"year":1,"title":1}}]

60.Use $lookup to join the users collection with the comments collection and find all comments made by users from a specific email domain.
--->[{"$lookup": {"from": "users",  "localField": "user_id",   "foreignField": "_id", "as": "user_details" }},{"$unwind": "$user_details"  },{"$match": {"user_details.email": { "$regex": "@example.com$", "$options": "i" }  }},{"$project": {"_id": 1,"comment": 1, "user_details.email": 1  }}]

61. Find the movie with the highest tomatoes.viewer.rating.
--->[{$sort: { "tomatoes.viewer.rating": -1 }},{$limit: 1}]

62. List all movies where the awards.nominations is greater than 5.
--->[{$match: {"awards.nominations": { $gt: 5 }}}]

63. Use $addFields to add a new field isPopular that is true if the IMDb rating is greater than 7 and the movie has more than 100 comments.
--->[{$addFields: {"isPopular": {$and: [{$gt: ["$imdb.rating",7]},{ $gt: ["$num_mflix_comments",100]}]}}}]

64. Find the top 5 movies with the most nominations.
---> [{$sort: { "awards.nominations": -1 }},{$limit: 5}]

65. Use $unwind on the languages array and find the average runtime of movies in each language.
---> [{$unwind: "$languages"},{$group: {_id: "$languages",averageRuntime: { $avg: "$runtime" }}}]

66. Group movies by year and find the average number of awards won per movie for each year.
---> [{$group: {_id: "$year",averageAwardsWon: { $avg: "$awards.wins" }}}]

67. Find all movies where the plot contains the word "space".
--->[{$match: {plot: { $regex: "space", $options: "i" }}}]

68.Use $lookup to join the comments collection with the movies collection and find all movies with at least 1 comment.
--->[{$lookup: {from: "comments",localField: "_id",foreignField: "movie_id",as: "comment_info"}},{$match: {"comment_info.0": {$exists:true}}}]

69. List all movies where the directors field includes "Christopher Nolan".
--->[{$match: {directors: "Christopher Nolan"}}]

70. Find the total number of awards won by movies in each year.
---> [{$group: {_id: "$year",totalAwardsWon: { $sum: "$awards.wins" }}}]

71. Use $project to display only the title, year, and tomatoes.viewer.rating fields for all movies.
--->[{$project: {title: 1,year: 1,"tomatoes.viewer.rating": 1}}]

72. Find all movies where the cast includes both "Brad Pitt" and "Angelina Jolie".
--->[{$match: {cast: { $all: ["Brad Pitt", "Angelina Jolie"] }}}]

73. Use $unwind on the genres array and find the average IMDb rating for movies in each genre.
--->[{$unwind: "$genres"},{$group: {_id: "$genres",averageIMDbRating: { $avg: "$imdb.rating" }}}]

74. Group movies by rated and find the total runtime of all movies for each rating.
---> [{$group: {_id: "$rated",totalRuntime: { $sum: "$runtime" }}}]

75. Find the top 5 movies with the highest awards.wins.
---> [{$sort: { "awards.wins": -1 }},{$limit: 5}]

76. Use $addFields to add a new field isShort that is true if the runtime is less than 90 minutes.
--->[{$addFields: {isShort: { $lt: ["$runtime", 90] }}}]

77. Find all movies where the languages field includes "Spanish".
--->[{$match: {languages: "Spanish"}}]

78. Use $lookup to join the theaters collection with the movies collection and find all theaters showing movies released in 2010.
--->[{$lookup: {from: "movies",localField: "movie_id",foreignField: "_id",as: "movie_details"}},{$match: {"movie_details.year": 2010}},{$project: {"_id":1,"movies_details.year":1}}]

79. List all movies where the awards.wins is greater than 10.
--->[ {$match: {"awards.wins": { $gt: 10 }}}]

80. Find the average number of nominations for movies in each genre.
--->[{$unwind: "$genres"},{$group: {_id: "$genres",averageNominations: { $avg: "$awards.nominations" }}}]

81. Use $unwind on the cast array and find the top 5 actors with the most awards.
--->[{$unwind: "$cast"},{$group: {_id: "$cast","awards_num": {$sum: "$awards.wins"}}},{$sort: {"awards_num": -1}},{$limit: 5}]

82. Group movies by year and find the movie with the most awards for each year.
---> [{$group: {_id: "$year","top_movie": {$max: {"wins": "$awards.wins","title": "$title",}}}},]

83. Find all movies where the plot contains the word "family".
--->[ {$match: {plot: /family/i}}]

84. Use $project to display only the title, year, and cast fields for all movies.
--->[{$project: {title: 1,year: 1,cast: 1}}]

85. Find the top 5 movies with the highest awards.nominations.
---> [{$sort: { "awards.nominations": -1 }},{$limit: 5},{$project: {title: 1,"awards.nominations": 1}}]

86. Use $addFields to add a new field isCriticallyAcclaimed that is true if the tomatoes.viewer.rating is greater than 4.
--->[{$addFields: {isCriticallyAcclaimed: { $gt: ["$tomatoes.viewer.rating", 4] }}}]

87. Find all movies where the directors field includes "Steven Spielberg".
---> [{$match: {directors: "Steven Spielberg"}}]

88. Use $lookup to join the comments collection with the movies collection and find all movies with at least 5 comments.
---> [{$lookup: {from: "movies",localField: "movie_id",foreignField: "_id",as: "movie_info"}},{$unwind: "$movie_info"},{$match: {"movie_info.num_mflix_comments": {$eq: 5}}}]

89. List all movies where the languages field includes "German".
--->[{$match: {languages: "German" }},{$project: {title: 1,year: 1,languages: 1}}]

90. Find the total number of awards won by movies in each genre.
---> [{$unwind: "$genres"},{$group: {_id: "$genres", total_awards_won: { $sum: "$awards.wins" } }}]

91. Use $unwind on the genres array and find the top 5 genres with the highest average IMDb rating.
---> [{$unwind: "$genres"},{$group: {_id: "$genres",avg_rating: { $avg: "$imdb.rating" }}},{$sort: { avg_rating: -1 }},{
$limit: 5 }]

92. Group movies by year and find the total number of awards won for each year.
--->[{$group: {_id: "$year",total_awards: { $sum: "$awards.wins" } }}]

93. Find all movies where the plot contains the word "adventure".
---> {$match: {plot: /adventure/i}},{$project: {title: 1plot: 1}}

94. Use $project to display only the title, year, and awards.nominations fields for all movies.
--->[ {$project: {title: 1,year: 1, "awards.nominations": 1 }}]

95. Find the top 5 movies with the highest tomatoes.viewer.rating.
--->[{$sort: { "tomatoes.viewer.rating": -1 } },{$limit: 5 },{$project: {title: 1, "tomatoes.viewer.rating": 1 
}}]

96. Use $addFields to add a new field isBlockbuster that is true if the IMDb rating is greater than 8 and the runtime is greater than 120 minutes.
---> [{$addFields: {isBlockbuster: {$and: [{ $gt: ["$imdb.rating", 8] }, { $gt: ["$runtime", 120] }]}}}]

97. Find all movies where the cast includes "Meryl Streep".
---> [{$match: {cast: "Meryl Streep" }},{$project: {title: 1, cast: 1 }}]

98. Use $lookup to join the users collection with the comments collection and find all comments made by users with a specific name.
---> [{$lookup: {from: "comments",localField: "email",foreignField: "email",as: "comment_info"}},{$unwind: "$comment_info"},{$group: {_id: "$comment_info.name","comments": {$push: "comment_info.text"}}},{$project: {"comment_info.name": 1,"comments":1}}]

99. List all movies where the directors field includes "Quentin Tarantino".
---> [{$match: {directors: "Quentin Tarantino"}},{$project: {title: 1,year: 1,directors: 1 }}]

100. Find the average runtime of movies for each year.
--->[{$group: {_id: "$year", average_runtime: { $avg: "$runtime" } }},{$sort: { _id: 1 }}]







